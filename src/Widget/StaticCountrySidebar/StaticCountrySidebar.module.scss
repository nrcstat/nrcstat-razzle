@import '@/style/common.scss';

.container {
  .datapoint-label,
  .datapoint-figure {
    margin: 0;
    padding: 0;
    line-height: 0;
  }
  .datapoint-label {
    font-family: Roboto;
    font-size: 11px;
    font-weight: 500;
    line-height: 18px;
    letter-spacing: 0em;
    text-align: left;
    white-space: nowrap;
  }
  .datapoint-figure {
    font-family: Roboto Condensed;
    font-size: 26px;
    font-weight: 700;
    line-height: 36px;
    letter-spacing: 0em;
    text-align: left;
  }
  .read-more-link {
    text-align: center;
    font-family: Roboto;
    font-size: 14px;
    font-weight: 400;
    line-height: 18px;
    letter-spacing: 0em;
    color: #212121;
    text-decoration: underline;
    text-decoration-color: $nrcOrange;
  }
}

.global-displacement-variant {
  margin-top: 0.8em;
  margin-bottom: 1.1em;

  dl {
    margin: 0;
  }
  .facts-grid {
    display: grid;
    grid-template-columns: 50% 50%;
    grid-auto-rows: 1fr;
    gap: 0.2em;
  }

  .grid-cell {
    background-color: #ededed;
    padding: 0.6em 0.6em;
  }
  .grid-cell-content {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  caption {
    display: inline-block;
    font-family: Roboto;
    font-size: 14px;
    font-weight: 400;
    color: #212121;
    width: 100%;
    font-style: italic;
  }
}

.gors-variant {
  margin-top: 1.1em;
  margin-bottom: 1.1em;

  .core-competencies-grid {
    display: grid;
    // NOTE: the value of 10.7em was obtained through trial and failure. To modify, open a
    // browser pointed at static-country-sidebar-gors-variant.html, and play around with
    // different viewport widths while adjusting the number. This is likely to become
    // necessary next time we change GORS data point labels, especially if we start using
    // English GORS data labels (at time of writing only Norwegian labels are used).
    //
    // The alternative is trying to program a grid with truly dynamic column widths where
    // no hardcoded width is needed.
    // which I've spent around three hours trying to achieve just that, without success.
    // I'm sure if it's possible, and I decided it's wasn't worth the hassle to continue
    // trying.
    // A short summary of the attempt:
    // Trying to use flexbox instead of grid is very promising... until we see that a
    // flexbox rule of "flex: 1 1 auto" which should make all items equal width, doesn't
    // work. It does work... but only for each individual line. The result is prettty
    // much the same as seen by this poor chap: https://stackoverflow.com/q/23274338
    // If trying to do it with CSS grid, the issue is that implicitly created rows and
    // columns can't have the auto-sizing of cells I'm looking for.
    grid-template-columns: repeat(auto-fill, minmax(9.1em, 1fr));
    column-gap: 0.3em;
  }

  .core-competency-item {
    flex: 1 1 auto;
    display: grid;
    grid-template: 1.1em auto / 3.2em auto;
    column-gap: 0.2em;
    grid-template-areas:
      'iconarea label'
      'iconarea figure';
    width: max-content;
  }
  // Selects every .core-competency-item except first one
  .core-competency-item:not(:last-child) {
    margin-bottom: 0em;
  }
  .core-competency-icon {
    grid-area: iconarea;
  }
  .core-competency-label {
    padding-top: 0.4em;
    grid-area: label;
  }
  .core-competency-figure {
    grid-area: figure;
  }
  caption {
    display: inline-block;
    font-family: 'Roboto Condensed';
    font-size: 20px;
    font-weight: 400;
    color: #212121;
    width: 100%;
    text-align: left;
    margin-bottom: 0.7em;
  }
  figure {
    margin: 0;
  }
  .read-more-cell {
    margin-top: 0.2em;
  }
}
